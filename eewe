<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Мини-Майнкрафт</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #87CEEB;
        }
        canvas {
            display: block;
        }
        #fpsCounter {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 20px;
            font-family: Arial, sans-serif;
        }
        #menu {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            font-family: Arial, sans-serif;
            color: white;
        }
        #menu button {
            padding: 10px 20px;
            font-size: 20px;
            background-color: #4CAF50;
            border: none;
            color: white;
            cursor: pointer;
        }
        #menu button:hover {
            background-color: #45a049;
        }
        #settings {
            margin-top: 20px;
            display: none;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
        }
        #settings input {
            width: 100%;
            margin-top: 10px;
        }
    </style>
</head>
<body>
<canvas id="gameCanvas"></canvas>
<div id="fpsCounter"></div>
<div id="menu">
    <h1>Мини-Майнкрафт</h1>
    <button id="startButton">Начать игру</button>
    <button id="settingsButton">Настройки</button>
    <div id="settings">
        <label for="renderDistance">Дальность прорисовки: </label>
        <input type="range" id="renderDistance" min="5" max="50" value="20">
        <span id="renderDistanceValue">20</span>
    </div>
</div>
<script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const tileSize = 50;
    const rows = Math.ceil(canvas.height / tileSize);
    const cols = Math.ceil(canvas.width / tileSize);
    const groundLevel = Math.floor(rows * 0.6);
    let renderDistance = 20; // Начальная дальность прорисовки
    let worldOffsetX = 0;
    const world = {};
    let gameStarted = false; // Флаг для отслеживания, началась ли игра

    document.getElementById('renderDistance').addEventListener('input', (e) => {
        renderDistance = e.target.value;
        document.getElementById('renderDistanceValue').innerText = renderDistance;
    });

    function generateWorldColumn(col) {
        if (!world[col]) {
            world[col] = Array.from({ length: rows }, (_, y) => {
                const heightVariation = Math.random() > 0.7 ? Math.floor(Math.random() * 3) : 0; // Вертикальные вершины
                return y >= groundLevel - heightVariation ? (y === groundLevel ? "grass" : "dirt") : "sky";
            });
        }
    }

    // Игрок
    const player = {
        x: Math.floor(cols / 2),
        y: groundLevel - 1,
        width: tileSize * 0.8,
        height: tileSize * 1.2,
        color: "red",
        velocityX: 0,
        velocityY: 0,
        speed: 0.1,
        jumping: false, // Флаг для прыжка
        inventory: [] // Инвентарь
    };

    const gravity = 0.3;  // Уменьшаем силу гравитации для более плавного падения

    // Отрисовка блока
    function drawBlock(x, y, type) {
        const colors = { sky: "#87CEEB", grass: "#32CD32", dirt: "#8B4513" };
        ctx.fillStyle = colors[type] || "white";
        ctx.fillRect((x - worldOffsetX) * tileSize, y * tileSize, tileSize, tileSize);
        ctx.strokeStyle = "black";
        ctx.strokeRect((x - worldOffsetX) * tileSize, y * tileSize, tileSize, tileSize);
    }

    // Отрисовка игрока
    function drawPlayer() {
        ctx.fillStyle = player.color;
        ctx.fillRect(
            (player.x - worldOffsetX) * tileSize + tileSize * 0.1,
            player.y * tileSize + tileSize * 0.1,
            player.width,
            player.height
        );
    }

    // Проверка столкновений
    function isSolidBlock(x, y) {
        const column = world[x];
        return column && column[y] && column[y] !== "sky";
    }

    // Обновление игрока
    function updatePlayer(deltaTime) {
        // Гравитация
        if (!player.jumping) {
            player.velocityY += gravity * deltaTime;
        }

        // Горизонтальное движение
        player.x += player.velocityX * deltaTime;

        // Проверка столкновений по горизонтали
        const leftBlock = Math.floor(player.x);
        const rightBlock = Math.ceil(player.x);
        const footBlock = Math.floor(player.y + player.height / tileSize);

        // Если игрок идет вправо
        if (player.velocityX > 0) {
            if (isSolidBlock(rightBlock, footBlock - 1)) { // Проверка столкновения с блоком справа
                player.x = rightBlock - 1; // Остановка игрока от столкновения
                player.velocityX = 0; // Остановка движения по X
            }
        } else if (player.velocityX < 0) { // Если игрок идет влево
            if (isSolidBlock(leftBlock, footBlock - 1)) { // Проверка столкновения с блоком слева
                player.x = leftBlock + 1; // Остановка игрока от столкновения
                player.velocityX = 0; // Остановка движения по X
            }
        }

        // Вертикальное движение
        player.y += player.velocityY * deltaTime;

        // Проверка столкновений по вертикали
        const headBlock = Math.floor(player.y);
        if (player.velocityY > 0 && isSolidBlock(leftBlock, footBlock)) {
            player.y = footBlock - player.height / tileSize;
            player.velocityY = 0;
            player.jumping = false; // Заканчиваем прыжок
        } else if (player.velocityY < 0 && isSolidBlock(leftBlock, headBlock)) {
            player.y = headBlock + 1;
            player.velocityY = 0;
        }

        // Ограничение по карте
        player.x = Math.max(worldOffsetX, player.x);
    }

    // Управление
    const keys = {};
    window.addEventListener("keydown", (e) => (keys[e.key] = true));
    window.addEventListener("keyup", (e) => (keys[e.key] = false));

    function handleInput(deltaTime) {
        // Движение влево (a) или вправо (d)
        if (keys["a"]) {
            player.velocityX = -player.speed;
        } else if (keys["d"]) {
            player.velocityX = player.speed;
        } else {
            player.velocityX = 0;
        }

        // Генерация мира по мере движения игрока
        if (player.x - worldOffsetX < 3) {
            worldOffsetX -= 1;
            generateWorldColumn(worldOffsetX - 1);
        } else if (player.x - worldOffsetX > cols - 3) {
            worldOffsetX += 1;
            generateWorldColumn(worldOffsetX + cols);
        }
    }

    // Генерация начального мира
    for (let x = -10; x < cols + 10; x++) {
        generateWorldColumn(x);
    }

    let lastTime = 0;
    let fps = 0;
    let frameCount = 0;
    let lastFPSTime = 0; // переменная для отслеживания времени для FPS

    function gameLoop(timestamp) {
        if (!gameStarted) return; // Не запускаем игру, пока не нажата кнопка "Начать игру"
        
        const deltaTime = (timestamp - lastTime) / 16.67; // Нормализуем к 60 FPS
        lastTime = timestamp;

        frameCount++;

        // Обновление FPS каждый раз в секунду
        if (timestamp - lastFPSTime >= 1000) {
            fps = frameCount;
            frameCount = 0;
            lastFPSTime = timestamp;
        }

        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Обновление игрока
        handleInput(deltaTime);
        updatePlayer(deltaTime);

        // Отображение мира
        for (let x = worldOffsetX; x < worldOffsetX + renderDistance; x++) {
            for (let y = 0; y < rows; y++) {
                drawBlock(x, y, world[x][y]);
            }
        }

        drawPlayer(); // Отрисовка игрока

        // Отображение FPS
        document.getElementById("fpsCounter").textContent = `FPS: ${fps}`;

        requestAnimationFrame(gameLoop);
    }

    document.getElementById('startButton').addEventListener('click', () => {
        gameStarted = true;
        document.getElementById('menu').style.display = 'none';
        gameLoop(0);
    });

    document.getElementById('settingsButton').addEventListener('click', () => {
        const settings = document.getElementById('settings');
        settings.style.display = settings.style.display === 'none' ? 'block' : 'none';
    });

    // Инициализация игры
</script>
</body>
</html>
